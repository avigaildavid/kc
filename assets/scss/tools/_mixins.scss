// =====================================================================================================================================
@mixin mdash($position, $line-clr :$blueGrey, $styles:true) {
    @if $position == both {
        $position: 'before, &:after';
    }
    &:#{$position} {
        @if $position ==  before {top:0;}
        @else if $position ==  after {bottom:0;}

        @if $styles {
            position: absolute;
            left: 0; right:0;
            margin:0 auto;
            content:"";
            width: 42px;
            height: 1px;
            background-color: $line-clr;
        }
        // Include any extra rules supplied for the pseudo-element
        @content;
    }

}




// usage @include font-size(14px);
// px Will be overridden if browser supports rem
@function calculateRem($size) {
    $remSize: $size / 16px;
    @return $remSize * 1rem;
}

@mixin font-size($size) {
    font-size: $size;
    font-size: calculateRem($size);
}

// =====================================================================================================================================
// usage  @include clearfix();
@mixin clearfix($extend: true) {
    @if $extend {
        @extend %clearfix;
    }
    @else {
        &:before,
        &:after {
            content: '';
            display: table;
            clear: both;
        }
    }
}

%clearfix {
    @include clearfix($extend: false);
}

// =====================================================================================================================================
// @include box-shadow();
@mixin box-shadow($left:4px, $top:4px, $blur:10px, $spread:-1px, $color:#666, $inset:"") {
    -webkit-box-shadow:$left $top $blur $spread $color #{$inset};
    -moz-box-shadow:$left $top $blur $spread $color #{$inset};
    box-shadow:$left $top $blur $spread $color #{$inset};
}

// =====================================================================================================================================


// =====================================================================================================================================
// usage @include vertical-align(absolute);
@mixin vertical-align($position: relative) {
    position: $position;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
}

// =====================================================================================================================================
// usage @include transitionIt(all,1s);
@mixin transitionIt($prop, $secs) {
    -webkit-transition: $prop $secs ease-in-out;
    -moz-transition: $prop $secs ease-in-out;
    -o-transition: $prop $secs ease-in-out;
    transition: $prop $secs ease-in-out;
}

// =====================================================================================================================================
// For adding font icons to elements using CSS pseudo-elements
// http://jaydenseric.com/blog/fun-with-sass-and-font-icons
@mixin icon($position: before, $icon: false, $styles: true) {
    @if $position==both {
        $position: 'before, &:after';
    }
    // Either a :before or :after pseudo-element, or both, defaulting to :before
    &:#{$position} {
        @if $icon {
            // A particular icon has been specified
            content: "#{map-get($icons, $icon)}";
        }
        @if $styles {
            // Supportive icon styles required
            display: inline-block;
            font-style: normal;
            font-weight: normal;
            font-family: $font-icon;
            text-rendering: auto;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }
        // Include any extra rules supplied for the pseudo-element
        @content;
    }
}

// =====================================================================================================================================
// =====================================================================================================================================
// usage @include placeholder($white);
@mixin placeholder($color) {
    color: $color;
    &::-webkit-input-placeholder {
        color: $color;
    }
    /* Firefox 18- */
    &:-moz-placeholder {
        color: $color;
    }
    /* Firefox 19+ */
    &::-moz-placeholder {
        color: $color;
    }
    /* IE 10+ */
    &:-ms-input-placeholder {
        color: $color;
    }
    /* Edge */
    &::-ms-input-placeholder {
        color: $color;
    }
    /* Default Usage */
    &:placeholder-shown {
        color: $color;
    }
    /*hide on focuse */
    &:focus::-webkit-input-placeholder {
        color: transparent;
    }
    &:focus::-moz-placeholder {
        color: transparent;
    }
}

//usage  select {@include msHideSelect(select);}
@mixin msHideSelect ($attribute) {
    #{$attribute}::-ms-expand {
        display: none;
    }
}

// =====================================================================================================================================
// usage @include word-wrap;
@mixin word-wrap() {
    overflow-wrap: break-word;
    word-wrap: break-word;
    -ms-word-break: break-all;
    word-break: break-word;
    -ms-hyphens: auto;
    -moz-hyphens: auto;
    -webkit-hyphens: auto;
    hyphens: auto;
}

// usage @include ellipsis;
@mixin ellipsis() {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}

// =====================================================================================================================================
// usage @include bgalpha('background-color', rgba(black, 0.5), white);
@mixin bgalpha($attribute, $color, $background) {
    $percent: alpha($color) * 100%;
    $opaque: opacify($color, 1);
    $solid-color: mix($opaque, $background, $percent);
    #{$attribute}: $solid-color;
    #{$attribute}: $color;
}

// =====================================================================================================================================
@mixin wkscroll () {
    -webkit-overflow-scrolling: touch;
    overflow-y: auto;
    overflow-x: hidden;
}
